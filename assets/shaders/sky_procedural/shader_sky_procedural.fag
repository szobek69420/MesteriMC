#version 330 core

in vec3 pos;

out vec4 fragColour;

uniform sampler2D texture_gradient;
uniform sampler2D texture_gradient_colour_0;
uniform sampler2D texture_gradient_colour_1;
uniform sampler2D texture_gradient_horizon;

uniform vec3 sunDirectionNormalized;
uniform vec3 sunColour;

uniform float timeOfDay;//[0;1)

const float sunInnerCutOff=0.999;
const float sunOuterCutOff=0.7;
const float sunOnePerDeltaCutOff=1/(sunInnerCutOff-sunOuterCutOff);

const float moonInnerCutOff=0.999;
const float moonOuterCutOff=0.99;
const float moonOnePerDeltaCutOff=1/(moonInnerCutOff-moonOuterCutOff);

void main()
{
	vec3 dir=normalize(pos);
	
	vec2 uvGradient=vec2(0.5*dot(dir, vec3(0,1,0))+0.5,0.5);
	vec2 uvGradientColour=vec2(timeOfDay, 0.5f);


	vec3 gradient=texture(texture_gradient,uvGradient).rgb;
	float horizonZ=2*texture(texture_gradient_horizon, uvGradientColour).z-1;
	gradient.y*=mix(1,max(dot(dir, vec3(0,0,horizonZ)),0), abs(horizonZ));
	gradient/=(gradient.x+gradient.y+gradient.z);

	vec3 skyColour0=texture(texture_gradient_colour_1, uvGradientColour).xyz;
	vec3 skyColour1=texture(texture_gradient_colour_0, uvGradientColour).xyz;
	vec3 skyColour2=skyColour0;

	vec3 sky=gradient.x*skyColour0+gradient.y*skyColour1+gradient.z*skyColour2;

	float sunDot=dot(sunDirectionNormalized, dir);
	if(sunDot>sunOuterCutOff)
	{
		sky=mix(sky, sunColour, pow(min((sunDot-sunOuterCutOff)*sunOnePerDeltaCutOff,1),32));
	}

	float moonDot=-sunDot;
	if(moonDot>moonOuterCutOff)
	{
		sky=mix(sky, vec3(1), pow(min((moonDot-moonOuterCutOff)*moonOnePerDeltaCutOff,1),32));
	}

	fragColour=vec4(sky,1);
}