#version 330 core

out vec4 fragColor;

in vec3 lightPosition;
in vec3 lightColour;
in vec3 lightAttenuation;

uniform sampler2D texture_normal; //normal+ao
uniform sampler2D texture_albedospec;
uniform sampler2D texture_shadow;
uniform sampler2D texture_depth;
uniform sampler2D texture_ssao;

uniform int shadowOn;//are shadows on (by settings)
uniform float shadowStrength;//the current strength of the shadows
uniform mat4 shadow_lightMatrix; //from the camera's view space to the light's projection space
const float shadowBias=0.003;

//stratified poission shadow sampling (vagy vmi olyasmi)
vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

uniform mat4 projection_inverse;

uniform float onePerScreenWidth;
uniform float onePerScreenHeight;

uniform float fogExponent;
uniform vec3 fogColour;
uniform float fogStart;
uniform float fogEnd;
uniform float fogHelper;

uniform float shadowStart;
uniform float shadowEnd;
uniform float shadowHelper;// 1/(shadowEnd-shadowStart)

void main()
{
	int isDirectional=0;
	if(lightAttenuation.y<0.00001&&lightAttenuation.z<0.00001)
		isDirectional=69;

	vec2 uv=vec2(gl_FragCoord.x*onePerScreenWidth, gl_FragCoord.y*onePerScreenHeight);
	float depth=texture(texture_depth, uv).r;//getting depth buffer info
	vec4 pos = projection_inverse * (vec4(uv, depth, 1)* 2 - 1);
	vec3 viewspace_position = pos.xyz / pos.w;
    vec3 view_dir = normalize(-viewspace_position); //(view_pos-frag_pos), but view_pos is (0, 0, 0) in view space

	float distanceFromEye=length(viewspace_position);
	
	vec4 normalTemp=texture(texture_normal,uv);
	vec3 normal = normalTemp.rgb * 2 - 1;
	float ambientOcclusion=normalTemp.a;
	vec3 albedo = texture(texture_albedospec, uv).rgb;
	float specular = texture(texture_albedospec, uv).a;
	
	// attenuation
	float distance = length(lightPosition - viewspace_position);
	float attenuation = lightAttenuation.x;
	if(isDirectional==0)
		attenuation=lightAttenuation.x / (1 + lightAttenuation.y * distance + lightAttenuation.z * distance * distance);

	vec3 lighting = vec3(0);
	
	// ambient
	vec3 amb = 0.3*attenuation*ambientOcclusion*albedo;

	// albedo
	vec3 light_dir;
	if(isDirectional!=0)//directional
		light_dir=lightPosition;
	else
		light_dir=normalize(lightPosition - viewspace_position);

	vec3 alb = max(dot(normal, light_dir), 0.0) * albedo * lightColour;

	// specular
	vec3 halfway_dir = normalize(light_dir + view_dir);  
	float sp = pow(max(dot(normal, halfway_dir), 0.0), 16.0);
	vec3 spec = lightColour * sp * specular;

	//shadow check
	float oneMinusShadowStrength=1;
	if(shadowOn!=0&&shadowStrength>0.00001)
	{
		vec4 shadowPos=shadow_lightMatrix*vec4(viewspace_position, 1);
		shadowPos.xyz/=shadowPos.w;
		shadowPos=0.5*shadowPos+0.5;
		float shadowDepth=texture(texture_shadow, shadowPos.xy).r;


		if(shadowPos.x<=1&&shadowPos.x>=0&&shadowPos.y<=1&&shadowPos.y>=0&&shadowDepth<0.9999&&distanceFromEye<shadowEnd)
		{
			oneMinusShadowStrength=1;//here it means shadow strength
			for(int i=0;i<4;i++)
			{
				int index = int(16.0*random(floor(viewspace_position*1000.0), i))%16;
				if(texture(texture_shadow, shadowPos.xy+poissonDisk[index]/1500.0).r>shadowPos.z-shadowBias)
					oneMinusShadowStrength-=0.25;
			}
			oneMinusShadowStrength*=max(0,shadowStrength);

			if(distanceFromEye>shadowStart)
				oneMinusShadowStrength*=(shadowEnd-distanceFromEye)*shadowHelper;

			oneMinusShadowStrength=1-oneMinusShadowStrength;//from here on it means oneMinusShadowStrength
		}
	}
	
	alb *= attenuation*oneMinusShadowStrength;
	spec *= attenuation*oneMinusShadowStrength;
	lighting += amb + alb + spec;


	//fog
	float alpha= 1;
    if(distanceFromEye>fogStart)
        alpha*=(fogEnd-distanceFromEye)*fogHelper;
    if(alpha<0)
        alpha=0;

	fragColor = vec4(lighting,alpha);

	//fragColor = vec4(oneMinusShadowStrength, oneMinusShadowStrength, oneMinusShadowStrength, 1.0);	
	//fragColor = vec4(ambientOcclusion, ambientOcclusion, ambientOcclusion, 1.0);	

	//fragColor=vec4(depth, depth, depth,1);
	//fragColor = vec4(normal, 1.0);
	//fragColor=vec4(0.005*viewspace_position+0.5,1);
}
