#version 330 core

in vec2 uv;

out vec4 fragColour;

uniform sampler2D tex;
uniform float exposure;

const float offset=0/100.0;

const vec2 offsets[9]=vec2[](
        vec2(-offset,  offset), // top-left
        vec2( 0.0f,    offset), // top-center
        vec2( offset,  offset), // top-right
        vec2(-offset,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( offset,  0.0f),   // center-right
        vec2(-offset, -offset), // bottom-left
        vec2( 0.0f,   -offset), // bottom-center
        vec2( offset, -offset)  // bottom-right    
);

const float kernel[9] = float[](
    1.0 / 16, 1.0 / 16, 1.0 / 16,
    1.0 / 16, 8.0 / 16, 1.0 / 16,
    1.0 / 16, 1.0 / 16, 1.0 / 16  
);

void main()
{
	fragColour=vec4(0);

	for(int i=0;i<9;i++)
		fragColour+=kernel[i]*texture(tex,uv+offsets[i]);
	
	vec3 colour=fragColour.rgb;
	float alpha=fragColour.a;

	// exposure tone mapping
    colour = vec3(1.0) - exp(-colour * exposure);

    // gamma correction 
    colour = pow(colour, vec3(0.4545));

	fragColour.rgb=colour;
}